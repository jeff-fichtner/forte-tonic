# GitHub Actions Workflow for Dev Branch
# ======================================
#
# Purpose: Build, test, and version management for the dev branch
# 
# Workflow:
# 1. Build the application (install dependencies, lint, etc.)
# 2. Run unit tests. If tests fail, the workflow fails and stops.
# 3. If tests pass:
#    - Publish a new version tag on the dev branch (e.g., v1.1.0)
#    - Increment the version in package.json and commit the change back to the repository
#
# This ensures that only code passing all tests is versioned and tagged.

name: 'Dev Branch - Test and Version'

on:
  push:
    branches:
      - dev

jobs:
  test-and-version:
    name: 'Build, Test, and Version'
    runs-on: ubuntu-latest
    
    permissions:
      contents: write  # Needed to push tags and commits
      
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Fetch full history for version management
      
      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: 'Install dependencies'
        run: npm ci
      
      - name: 'Run linting'
        run: npm run lint
        
      - name: 'Run formatting check'
        run: npm run format:check
      
      - name: 'Run unit tests'
        run: npm test
        
      # Only proceed with versioning if all previous steps pass
      - name: 'Check if merge from main'
        id: check-merge
        run: |
          # Check if this is a merge commit from main
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if echo "$COMMIT_MSG" | grep -q "Merge.*main.*into.*dev"; then
            echo "skip_version=true" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Skipping version increment - this is a merge from main to dev"
          else
            echo "skip_version=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Proceeding with version increment"
          fi

      - name: 'Configure Git'
        if: success() && steps.check-merge.outputs.skip_version == 'false'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: 'Get current version'
        if: success() && steps.check-merge.outputs.skip_version == 'false'
        id: current-version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"
      
      - name: 'Increment patch version'
        if: success() && steps.check-merge.outputs.skip_version == 'false'
        id: new-version
        run: |
          # Extract version parts
          CURRENT_VERSION="${{ steps.current-version.outputs.version }}"
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
          
          # Increment patch
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Incrementing version: $CURRENT_VERSION ‚Üí $NEW_VERSION"
          
          # Update package.json
          npm version $NEW_VERSION --no-git-tag-version
          
          # Verify the change
          UPDATED_VERSION=$(node -p "require('./package.json').version")
          echo "Version updated to: $UPDATED_VERSION"
      
      - name: 'Commit version bump'
        if: success() && steps.check-merge.outputs.skip_version == 'false'
        run: |
          CURRENT_VERSION="${{ steps.current-version.outputs.version }}"
          NEW_VERSION="${{ steps.new-version.outputs.new_version }}"
          
          # Add and commit the version change (both package.json and package-lock.json)
          git add package.json package-lock.json
          git commit -m "chore: auto-increment version $CURRENT_VERSION ‚Üí $NEW_VERSION"
          
          echo "‚úÖ Version increment committed"
      
      - name: 'Create and push version tag'
        if: success() && steps.check-merge.outputs.skip_version == 'false'
        run: |
          NEW_VERSION="${{ steps.new-version.outputs.new_version }}"
          TAG_NAME="v$NEW_VERSION-dev"

          # Create annotated tag
          git tag -a "$TAG_NAME" -m "Auto-versioned pre-release for staging: $TAG_NAME

          GitHub Actions Build: ${{ github.run_id }}
          Commit: ${{ github.sha }}
          Branch: dev
          Tagged: $(date -u)"
          
          echo "üè∑Ô∏è  Created tag: $TAG_NAME"
          
          # Push commit and tag
          git push origin dev
          git push origin "$TAG_NAME"
          
          echo "‚úÖ Version tag pushed to repository"
      
      - name: 'Summary'
        if: success()
        run: |
          if [ "${{ steps.check-merge.outputs.skip_version }}" == "true" ]; then
            echo ""
            echo "‚úÖ DEV BRANCH WORKFLOW COMPLETED!"
            echo "================================="
            echo "‚úÖ Tests: PASSED"
            echo "‚è≠Ô∏è Version: SKIPPED (merge from main)"
            echo "üìÖ Time: $(date -u)"
            echo "üîó Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            echo "================================="
          else
            CURRENT_VERSION="${{ steps.current-version.outputs.version }}"
            NEW_VERSION="${{ steps.new-version.outputs.new_version }}"
            TAG_NAME="v$NEW_VERSION-dev"

            echo ""
            echo "üéâ DEV BRANCH WORKFLOW COMPLETED SUCCESSFULLY!"
            echo "=============================================="
            echo "‚úÖ Tests: PASSED"
            echo "‚úÖ Version: $CURRENT_VERSION ‚Üí $NEW_VERSION"
            echo "üè∑Ô∏è Tag: $TAG_NAME"
            echo "üìÖ Time: $(date -u)"
            echo "üîó Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            echo "=============================================="
            echo ""
            echo "üöÄ Next Steps:"
            echo "  ‚Ä¢ The dev tag '$TAG_NAME' will trigger the staging deployment"
            echo "  ‚Ä¢ Monitor Cloud Build for staging deployment status"
            echo "  ‚Ä¢ The new version is now ready for staging testing"
          fi
      
      - name: 'Failure summary'
        if: failure()
        run: |
          echo ""
          echo "‚ùå DEV BRANCH WORKFLOW FAILED!"
          echo "=============================="
          echo "Tests failed or another step encountered an error."
          echo "No version increment or tag was created."
          echo "Fix the issues and push again to retry."
          echo "=============================="