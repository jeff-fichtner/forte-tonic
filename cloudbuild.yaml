# Google Cloud Build CI/CD Pipeline
# Triggers on: push to dev branch
# Workflow: Test ‚Üí Deploy ‚Üí Increment Version ‚Üí Tag
# 
# This file should be placed at: cloudbuild.yaml (project root)
# 
# Setup required:
# 1. Enable APIs: Cloud Build, Cloud Run, Container Registry, Secret Manager
# 2. Create build trigger pointing to this file
# 3. Set up secrets in Secret Manager
# 4. Grant Cloud Build service account required permissions

steps:
  # Step 1: Install dependencies
  - name: 'node:18-alpine'
    entrypoint: 'npm'
    args: ['ci']
    id: 'install-deps'
    
  # Step 2: Run unit tests (MUST PASS before deployment)
  - name: 'node:18-alpine'
    entrypoint: 'npm'
    args: ['test']
    id: 'run-tests'
    waitFor: ['install-deps']
    
  # Step 3: Run linting and formatting checks
  - name: 'node:18-alpine'
    entrypoint: 'npm'
    args: ['run', 'format:check']
    id: 'format-check'
    waitFor: ['install-deps']
    
  - name: 'node:18-alpine'
    entrypoint: 'npm'
    args: ['run', 'lint']
    id: 'lint-check'
    waitFor: ['install-deps']

  # Step 4: Build Docker image (only after tests pass)
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build', 
      '-t', 'gcr.io/$PROJECT_ID/tonic:${BRANCH_NAME}-${SHORT_SHA}',
      '-t', 'gcr.io/$PROJECT_ID/tonic:${BRANCH_NAME}-latest',
      '.'
    ]
    id: 'build-image'
    waitFor: ['run-tests', 'format-check', 'lint-check']
    
  # Step 5: Push Docker image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', '--all-tags', 'gcr.io/$PROJECT_ID/tonic']
    id: 'push-image'
    waitFor: ['build-image']
    
  # Step 6: Deploy to Cloud Run staging (only after successful build)
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'run', 'deploy', 'tonic-staging',
      '--image=gcr.io/$PROJECT_ID/tonic:${BRANCH_NAME}-${SHORT_SHA}',
      '--region=${_DEPLOY_REGION}',
      '--platform=managed',
      '--set-env-vars=NODE_ENV=staging',
      '--set-secrets=WORKING_SPREADSHEET_ID=working-spreadsheet-id:latest',
      '--set-secrets=GOOGLE_SERVICE_ACCOUNT_EMAIL=google-service-account-email:latest', 
      '--set-secrets=GOOGLE_PRIVATE_KEY=google-private-key:latest',
      '--allow-unauthenticated',
      '--max-instances=10',
      '--memory=512Mi',
      '--cpu=1',
      '--port=3000'
    ]
    id: 'deploy-staging'
    waitFor: ['push-image']
    
  # Step 7: Wait for deployment to be ready
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "‚è≥ Waiting for deployment to be ready..."
        SERVICE_URL=$(gcloud run services describe tonic-staging --region=${_DEPLOY_REGION} --format='value(status.url)')
        echo "üîó Service URL: $$SERVICE_URL"
        
        # Wait up to 2 minutes for health check
        for i in {1..24}; do
          if curl -f "$$SERVICE_URL/api/health" > /dev/null 2>&1; then
            echo "‚úÖ Deployment is healthy!"
            break
          fi
          echo "‚è≥ Attempt $$i/24: Waiting for service to be ready..."
          sleep 5
        done
    id: 'health-check'
    waitFor: ['deploy-staging']

  # Step 8: Increment patch version (only after successful deployment)
  - name: 'node:18-alpine'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        apk add --no-cache git curl
        
        echo "üî¢ Auto-incrementing patch version after successful deployment..."
        
        # Get current version
        CURRENT_VERSION=$$(node -p "require('./package.json').version")
        echo "üìã Current version: $$CURRENT_VERSION"
        
        # Extract version parts
        MAJOR=$$(echo $$CURRENT_VERSION | cut -d. -f1)
        MINOR=$$(echo $$CURRENT_VERSION | cut -d. -f2)  
        PATCH=$$(echo $$CURRENT_VERSION | cut -d. -f3)
        
        # Increment patch
        NEW_PATCH=$$((PATCH + 1))
        NEW_VERSION="$$MAJOR.$$MINOR.$$NEW_PATCH"
        
        echo "üî¢ Incrementing version: $$CURRENT_VERSION ‚Üí $$NEW_VERSION"
        
        # Update package.json
        npm version $$NEW_VERSION --no-git-tag-version --allow-same-version
        
        # Verify the change
        UPDATED_VERSION=$$(node -p "require('./package.json').version")
        echo "‚úÖ Version updated to: $$UPDATED_VERSION"
        
        # Save version info for tagging step
        echo "$$NEW_VERSION" > /workspace/new_version.txt
        echo "$$CURRENT_VERSION" > /workspace/old_version.txt
    id: 'increment-version'
    waitFor: ['health-check']

  # Step 9: Commit version bump back to repository
  - name: 'gcr.io/cloud-builders/git'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Configure git
        git config user.email "cloudbuild@${PROJECT_ID}.iam.gserviceaccount.com"
        git config user.name "Cloud Build Auto-Increment"
        
        # Read version info
        NEW_VERSION=$$(cat /workspace/new_version.txt)
        OLD_VERSION=$$(cat /workspace/old_version.txt)
        
        # Add and commit the version change
        git add package.json
        git commit -m "chore: auto-increment version $$OLD_VERSION ‚Üí $$NEW_VERSION [ci skip]"
        
        # Create deployment tag
        DEPLOY_TAG="auto-deploy-v$$NEW_VERSION-$(date +%Y%m%d-%H%M%S)"
        git tag -a "$$DEPLOY_TAG" -m "Auto-deployment: v$$NEW_VERSION
        
        Build: ${BUILD_ID}
        Commit: ${COMMIT_SHA}
        Branch: ${BRANCH_NAME}
        Deployed: $(date)"
        
        echo "üè∑Ô∏è  Created tag: $$DEPLOY_TAG"
        
        # Push changes back to repository
        git push origin ${BRANCH_NAME}
        git push origin "$$DEPLOY_TAG"
        
        echo "‚úÖ Version increment committed and tagged"
    id: 'commit-version'
    waitFor: ['increment-version']
    secretEnv: ['GITHUB_TOKEN']

  # Step 10: Final notification and summary  
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        NEW_VERSION=$$(cat /workspace/new_version.txt)
        OLD_VERSION=$$(cat /workspace/old_version.txt)
        SERVICE_URL=$$(gcloud run services describe tonic-staging --region=${_DEPLOY_REGION} --format='value(status.url)')
        
        echo ""
        echo "üéâ CI/CD PIPELINE COMPLETED SUCCESSFULLY!"
        echo "========================================"
        echo "‚úÖ Tests: PASSED"
        echo "‚úÖ Build: SUCCESS"  
        echo "‚úÖ Deploy: SUCCESS"
        echo "‚úÖ Version: $$OLD_VERSION ‚Üí $$NEW_VERSION"
        echo "üîó URL: $$SERVICE_URL"
        echo "üè∑Ô∏è  Tag: auto-deploy-v$$NEW_VERSION-$(date +%Y%m%d-%H%M%S)"
        echo "üìÖ Time: $(date)"
        echo "========================================"

# Available secrets (set these up in Secret Manager)
availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/github-token/versions/latest
      env: 'GITHUB_TOKEN'

# Substitution variables (can be overridden in trigger)
substitutions:
  _DEPLOY_REGION: 'us-central1'

# Build configuration
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_STANDARD_2'  # 2 vCPU, 8GB RAM for faster builds
  diskSizeGb: 20

# Build timeout (prevent hanging builds)
timeout: '1200s'  # 20 minutes max
