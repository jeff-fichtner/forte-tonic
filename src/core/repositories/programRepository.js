import { RepositoryHelper } from './helpers/repositoryHelper.js';
import { Keys } from '../values/keys.js';
import { Class, Registration } from '../../shared/models/index.js';
import { AttendanceRecord } from '../models/attendanceRecord.js';
import { DateHelpers } from '../helpers/dateHelpers.js';

/**
 *
 */
export class ProgramRepository {
  /**
   *
   */
  constructor(dbClient) {
    this.dbClient = dbClient;
  }

  /**
   *
   */
  async getClasses(forceRefresh = false) {
    return await RepositoryHelper.getAndSetData(
      () => this.classes,
      async () =>
        (this.classes = await this.dbClient.getAllRecords(Keys.CLASSES, x => new Class(...x))),
      Keys.CLASSES,
      forceRefresh
    );
  }

  /**
   *
   */
  async getClassById(id) {
    const classes = await this.getClasses();
    return classes.find(x => x.id === id);
  }

  /**
   *
   */
  async getRegistrations(forceRefresh = false) {
    return await RepositoryHelper.getAndSetData(
      () => this.registrations,
      async () =>
        (this.registrations = await this.dbClient.getAllRecords(Keys.REGISTRATIONS, x => {
          const newRegistration = new Registration(...x);
          newRegistration.startTime = DateHelpers.parseGoogleSheetsDate(newRegistration.startTime);
          return newRegistration;
        })),
      Keys.REGISTRATIONS,
      forceRefresh
    );
  }

  /**
   *
   */
  async getRegistrationById(id) {
    const registrations = await this.getRegistrations();
    return registrations.find(x => x.id === id);
  }

  /**
   *
   */
  async register(registrationData, groupClass, instructor, createdBy) {
    const date = DateHelpers.getStartOfCurrentDayUTC();

    const weekDays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];

    let weekDayIndex = null;
    let weekDay = null;
    if (groupClass) {
      weekDay = groupClass.day;
      weekDayIndex = weekDays.indexOf(groupClass.day);

      registrationData.instructorId = instructor.id;
      registrationData.startTime = groupClass.startTime;
      registrationData.length = groupClass.length;
      registrationData.instrument = groupClass.instrument;
      registrationData.className = groupClass.title;
    } else {
      weekDayIndex = registrationData.day * 1;
      weekDay = weekDays[weekDayIndex];
    }

    const rooms = [
      instructor.mondayRoomId,
      instructor.tuesdayRoomId,
      instructor.wednesdayRoomId,
      instructor.thursdayRoomId,
      instructor.fridayRoomId,
    ];

    registrationData.roomId = rooms[weekDayIndex];

    registrationData.expectedStartDate = date;

    const record = new Registration(
      0, // id will be generated by the database
      registrationData.studentId,
      registrationData.instructorId,
      weekDay,
      registrationData.startTime,
      registrationData.length,
      registrationData.registrationType,
      registrationData.roomId,
      registrationData.instrument,
      registrationData.transportationType,
      registrationData.notes,
      registrationData.classId,
      registrationData.className,
      registrationData.expectedStartDate
    );

    return await this.dbClient.appendRecord(Keys.REGISTRATIONS, record, createdBy);
  }

  /**
   *
   */
  async getAttendanceForRegistrations(registrationIds) {
    const records = await RepositoryHelper.getAndSetData(
      () => this.attendanceRecords,
      async () =>
        (this.attendanceRecords = await this.dbClient.getAllRecords(
          Keys.ATTENDANCE,
          x => new AttendanceRecord(...x)
        )),
      Keys.ATTENDANCE
    );

    return records.filter(x => registrationIds.includes(x.registrationId));
  }

  /**
   *
   */
  async unregister(registrationId, deletedBy) {
    try {
      await this.dbClient.deleteRecord(Keys.REGISTRATIONS, registrationId, deletedBy);
      return true;
    } catch (error) {
      console.error(`Failed to unregister registration with ID ${registrationId}:`, error);
      return false;
    }
  }

  /**
   *
   */
  async recordAttendance(registrationId, createdBy) {
    const attendanceRecords = await this.getAttendanceForRegistrations([registrationId]);
    if (attendanceRecords.length > 0) {
      console.warn(`Attendance already recorded for registration ID ${registrationId}`);
      return attendanceRecords[0];
    }

    return await this.dbClient.appendRecord(
      Keys.ATTENDANCE,
      new AttendanceRecord(registrationId),
      createdBy
    );
  }

  /**
   *
   */
  async removeAttendance(registrationId, deletedBy) {
    const attendanceRecords = await this.getAttendanceForRegistrations([registrationId]);
    if (attendanceRecords.length === 0) {
      console.warn(`No attendance record found for registration ID ${registrationId}`);
      return true;
    }

    await this.dbClient.deleteRecord(Keys.ATTENDANCE, registrationId, deletedBy);
    return true;
  }
}
